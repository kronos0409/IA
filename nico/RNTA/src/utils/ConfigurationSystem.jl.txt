module ConfigurationSystem

export configure_brain_space, load_configuration, save_configuration
export RNTAConfig, merge_configurations, validate_configuration
export apply_presets, available_presets, register_preset
export dump_configuration, diff_configurations
export configure_for_hardware, configure_for_task
export ConfigurationSchema, required_configuration

using TOML
using JSON
using Dates
using CUDA

using ..RNTA: BrainSpace

"""
    RNTAConfig

Estructura que define la configuración del sistema RNTA.
"""
mutable struct RNTAConfig
    # Metadatos
    name::String
    version::String
    created_at::DateTime
    description::String
    
    # Configuración del espacio cerebral
    brain_space::Dict{Symbol,Any}
    
    # Configuración de módulos
    core::Dict{Symbol,Any}
    operations::Dict{Symbol,Any}
    adaptation::Dict{Symbol,Any}
    training::Dict{Symbol,Any}
    nlp::Dict{Symbol,Any}
    architecture::Dict{Symbol,Any}
    inference::Dict{Symbol,Any}
    acceleration::Dict{Symbol,Any}
    
    # Constructor predeterminado
    function RNTAConfig(name::String="default", description::String="Default configuration")
        new(
            name,
            "1.0.0",
            now(),
            description,
            Dict{Symbol,Any}(),  # brain_space
            Dict{Symbol,Any}(),  # core
            Dict{Symbol,Any}(),  # operations
            Dict{Symbol,Any}(),  # adaptation
            Dict{Symbol,Any}(),  # training
            Dict{Symbol,Any}(),  # nlp
            Dict{Symbol,Any}(),  # architecture
            Dict{Symbol,Any}(),  # inference
            Dict{Symbol,Any}()   # acceleration
        )
    end
end

"""
    ConfigurationSchema

Define el esquema y validación para las configuraciones.
"""
struct ConfigurationSchema
    # Estructura del esquema
    fields::Dict{Symbol,Dict{Symbol,Any}}
    
    # Restricciones y validaciones
    validations::Dict{Symbol,Vector{Function}}
    
    # Dependencias entre campos
    dependencies::Dict{Symbol,Vector{Symbol}}
    
    # Valores predeterminados
    defaults::Dict{Symbol,Any}
end

# Registro global de presets de configuración
const REGISTERED_PRESETS = Dict{Symbol,Dict{Symbol,Any}}()

"""
    configure_brain_space(brain_space::BrainSpace, config::RNTAConfig)

Aplica una configuración a un espacio cerebral existente.

# Argumentos
- `brain_space::BrainSpace`: El espacio cerebral a configurar
- `config::RNTAConfig`: La configuración a aplicar

# Retorna
- `BrainSpace` configurado
"""
function configure_brain_space(brain_space::BrainSpace, config::RNTAConfig)
    # Validar la configuración antes de aplicarla
    validate_configuration(config)
    
    # Aplicar configuración general del espacio cerebral
    apply_brain_space_config(brain_space, config.brain_space)
    
    # Aplicar configuraciones de módulos específicos
    apply_core_config(brain_space, config.core)
    apply_operations_config(brain_space, config.operations)
    apply_adaptation_config(brain_space, config.adaptation)
    apply_training_config(brain_space, config.training)
    apply_nlp_config(brain_space, config.nlp)
    apply_architecture_config(brain_space, config.architecture)
    apply_inference_config(brain_space, config.inference)
    apply_acceleration_config(brain_space, config.acceleration)
    
    # Registrar la configuración en los metadatos del espacio
    brain_space.metadata[:configuration] = config.name
    brain_space.metadata[:config_version] = config.version
    brain_space.metadata[:config_applied_at] = string(now())
    
    return brain_space
end

"""
    apply_brain_space_config(brain_space::BrainSpace, config::Dict{Symbol,Any})

Aplica la configuración específica del espacio cerebral.
"""
function apply_brain_space_config(brain_space::BrainSpace, config::Dict{Symbol,Any})
    if haskey(config, :dimensions)
        # En una implementación real, esto podría redimensionar el espacio
        # o simplemente actualizaría los metadatos
        brain_space.metadata[:configured_dimensions] = config[:dimensions]
    end
    
    if haskey(config, :resolution)
        brain_space.metadata[:configured_resolution] = config[:resolution]
    end
    
    # Aplicar otras configuraciones específicas del espacio cerebral
    for (key, value) in config
        if key ∉ [:dimensions, :resolution]
            brain_space.metadata[key] = value
        end
    end
end

"""
    apply_core_config(brain_space::BrainSpace, config::Dict{Symbol,Any})

Aplica la configuración del módulo core.
"""
function apply_core_config(brain_space::BrainSpace, config::Dict{Symbol,Any})
    # Configurar neurona tensorial
    if haskey(config, :tensor_neuron)
        # En una implementación real, esto actualizaría los parámetros
        # de las neuronas tensoriales en todo el espacio
        brain_space.metadata[:tensor_neuron_config] = config[:tensor_neuron]
    end
    
    # Configurar campos espaciales
    if haskey(config, :spatial_field)
        brain_space.metadata[:spatial_field_config] = config[:spatial_field]
    end
    
    # Configurar conexiones
    if haskey(config, :connections)
        brain_space.metadata[:connections_config] = config[:connections]
    end
    
    # Aplicar otras configuraciones del módulo core
    brain_space.metadata[:core_config] = config
end

"""
    apply_operations_config(brain_space::BrainSpace, config::Dict{Symbol,Any})

Aplica la configuración del módulo operations.
"""
function apply_operations_config(brain_space::BrainSpace, config::Dict{Symbol,Any})
    # Configurar transformaciones tensoriales
    if haskey(config, :tensor_transformations)
        brain_space.metadata[:tensor_transformations_config] = config[:tensor_transformations]
    end
    
    # Configurar activaciones volumétricas
    if haskey(config, :volumetric_activations)
        brain_space.metadata[:activation_config] = config[:volumetric_activations]
    end
    
    # Configurar mecanismos de atención
    if haskey(config, :spatial_attention)
        brain_space.metadata[:attention_config] = config[:spatial_attention]
    end
    
    # Configurar dinámica de propagación
    if haskey(config, :propagation_dynamics)
        brain_space.metadata[:propagation_config] = config[:propagation_dynamics]
    end
    
    # Aplicar otras configuraciones del módulo operations
    brain_space.metadata[:operations_config] = config
end

"""
    apply_adaptation_config(brain_space::BrainSpace, config::Dict{Symbol,Any})

Aplica la configuración del módulo adaptation.
"""
function apply_adaptation_config(brain_space::BrainSpace, config::Dict{Symbol,Any})
    # Configurar expansión dinámica
    if haskey(config, :dynamic_expansion)
        brain_space.metadata[:expansion_config] = config[:dynamic_expansion]
    end
    
    # Configurar especialización
    if haskey(config, :specialization)
        brain_space.metadata[:specialization_config] = config[:specialization]
    end
    
    # Configurar auto-poda
    if haskey(config, :self_pruning)
        brain_space.metadata[:pruning_config] = config[:self_pruning]
    end
    
    # Configurar reglas de plasticidad
    if haskey(config, :plasticity_rules)
        brain_space.metadata[:plasticity_config] = config[:plasticity_rules]
    end
    
    # Aplicar otras configuraciones del módulo adaptation
    brain_space.metadata[:adaptation_config] = config
end

"""
    apply_training_config(brain_space::BrainSpace, config::Dict{Symbol,Any})

Aplica la configuración del módulo training.
"""
function apply_training_config(brain_space::BrainSpace, config::Dict{Symbol,Any})
    # Configurar función de pérdida
    if haskey(config, :multidimensional_loss)
        brain_space.metadata[:loss_config] = config[:multidimensional_loss]
    end
    
    # Configurar optimizadores
    if haskey(config, :spatial_optimizers)
        brain_space.metadata[:optimizer_config] = config[:spatial_optimizers]
    end
    
    # Configurar propagación de gradientes
    if haskey(config, :gradient_propagation)
        brain_space.metadata[:gradient_config] = config[:gradient_propagation]
    end
    
    # Configurar clonación de modelo
    if haskey(config, :model_cloning)
        brain_space.metadata[:cloning_config] = config[:model_cloning]
    end
    
    # Aplicar otras configuraciones del módulo training
    brain_space.metadata[:training_config] = config
end

"""
    apply_nlp_config(brain_space::BrainSpace, config::Dict{Symbol,Any})

Aplica la configuración del módulo NLP.
"""
function apply_nlp_config(brain_space::BrainSpace, config::Dict{Symbol,Any})
    # Configurar tokenizador
    if haskey(config, :tensorial_tokenizer)
        brain_space.metadata[:tokenizer_config] = config[:tensorial_tokenizer]
    end
    
    # Configurar espacio semántico
    if haskey(config, :semantic_space)
        brain_space.metadata[:semantic_space_config] = config[:semantic_space]
    end
    
    # Configurar mapeo contextual
    if haskey(config, :contextual_mapping)
        brain_space.metadata[:context_mapping_config] = config[:contextual_mapping]
    end
    
    # Configurar generación de lenguaje
    if haskey(config, :language_generation)
        brain_space.metadata[:generation_config] = config[:language_generation]
    end
    
    # Aplicar otras configuraciones del módulo NLP
    brain_space.metadata[:nlp_config] = config
end

"""
    apply_architecture_config(brain_space::BrainSpace, config::Dict{Symbol,Any})

Aplica la configuración del módulo architecture.
"""
function apply_architecture_config(brain_space::BrainSpace, config::Dict{Symbol,Any})
    # Configurar capas corticales
    if haskey(config, :cortical_layers)
        brain_space.metadata[:cortical_config] = config[:cortical_layers]
    end
    
    # Configurar memoria tipo hipocampo
    if haskey(config, :hippocampal_memory)
        brain_space.metadata[:memory_config] = config[:hippocampal_memory]
    end
    
    # Configurar sistema prefrontal
    if haskey(config, :prefrontal_system)
        brain_space.metadata[:prefrontal_config] = config[:prefrontal_system]
    end
    
    # Configurar sistema atencional
    if haskey(config, :attentional_system)
        brain_space.metadata[:attention_system_config] = config[:attentional_system]
    end
    
    # Aplicar otras configuraciones del módulo architecture
    brain_space.metadata[:architecture_config] = config
end

"""
    apply_inference_config(brain_space::BrainSpace, config::Dict{Symbol,Any})

Aplica la configuración del módulo inference.
"""
function apply_inference_config(brain_space::BrainSpace, config::Dict{Symbol,Any})
    # Configurar diálogo interno
    if haskey(config, :internal_dialogue)
        brain_space.metadata[:dialogue_config] = config[:internal_dialogue]
    end
    
    # Configurar trayectorias de razonamiento
    if haskey(config, :reasoning_pathways)
        brain_space.metadata[:reasoning_config] = config[:reasoning_pathways]
    end
    
    # Configurar estimación de incertidumbre
    if haskey(config, :uncertainty_estimation)
        brain_space.metadata[:uncertainty_config] = config[:uncertainty_estimation]
    end
    
    # Configurar integración multimodal
    if haskey(config, :multimodal_integration)
        brain_space.metadata[:multimodal_config] = config[:multimodal_integration]
    end
    
    # Aplicar otras configuraciones del módulo inference
    brain_space.metadata[:inference_config] = config
end

"""
    apply_acceleration_config(brain_space::BrainSpace, config::Dict{Symbol,Any})

Aplica la configuración del módulo acceleration.
"""
function apply_acceleration_config(brain_space::BrainSpace, config::Dict{Symbol,Any})
    # Configurar CUDA
    if haskey(config, :cuda_tensors)
        brain_space.metadata[:cuda_config] = config[:cuda_tensors]
    end
    
    # Configurar paralelismo
    if haskey(config, :tensor_parallelism)
        brain_space.metadata[:parallelism_config] = config[:tensor_parallelism]
    end
    
    # Configurar optimización de memoria
    if haskey(config, :memory_optimization)
        brain_space.metadata[:memory_config] = config[:memory_optimization]
    end
    
    # Configurar adaptación a hardware
    if haskey(config, :hardware_adaptation)
        brain_space.metadata[:hardware_config] = config[:hardware_adaptation]
    end
    
    # Aplicar otras configuraciones del módulo acceleration
    brain_space.metadata[:acceleration_config] = config
end

"""
    load_configuration(filename::String; format::Symbol=:toml)

Carga una configuración desde un archivo.

# Argumentos
- `filename::String`: Ruta del archivo a cargar
- `format::Symbol=:toml`: Formato del archivo (:toml, :json)

# Retorna
- `RNTAConfig` cargada del archivo
"""
function load_configuration(filename::String; format::Symbol=:toml)
    # Verificar que el archivo existe
    if !isfile(filename)
        error("El archivo de configuración no existe: $filename")
    end
    
    # Cargar según formato
    raw_config = if format == :toml
        TOML.parsefile(filename)
    elseif format == :json
        open(filename) do f
            JSON.parse(f)
        end
    else
        error("Formato de configuración no soportado: $format")
    end
    
    # Convertir a RNTAConfig
    return dict_to_config(raw_config)
end

"""
    save_configuration(config::RNTAConfig, filename::String; format::Symbol=:toml)

Guarda una configuración en un archivo.

# Argumentos
- `config::RNTAConfig`: Configuración a guardar
- `filename::String`: Ruta del archivo a crear
- `format::Symbol=:toml`: Formato del archivo (:toml, :json)
"""
function save_configuration(config::RNTAConfig, filename::String; format::Symbol=:toml)
    # Convertir a diccionario
    config_dict = config_to_dict(config)
    
    # Guardar según formato
    if format == :toml
        open(filename, "w") do f
            TOML.print(f, config_dict)
        end
    elseif format == :json
        open(filename, "w") do f
            JSON.print(f, config_dict, 4)  # Con indentación
        end
    else
        error("Formato de configuración no soportado: $format")
    end
end

"""
    dict_to_config(dict::Dict)

Convierte un diccionario en una estructura RNTAConfig.
"""
function dict_to_config(dict::Dict)
    config = RNTAConfig(
        get(dict, "name", "default"),
        get(dict, "description", "Loaded configuration")
    )
    
    config.version = get(dict, "version", "1.0.0")
    config.created_at = try
        DateTime(get(dict, "created_at", string(now())))
    catch
        now()
    end
    
    # Convertir secciones a símbolos
    if haskey(dict, "brain_space")
        config.brain_space = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in dict["brain_space"])
    end
    
    if haskey(dict, "core")
        config.core = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in dict["core"])
    end
    
    if haskey(dict, "operations")
        config.operations = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in dict["operations"])
    end
    
    if haskey(dict, "adaptation")
        config.adaptation = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in dict["adaptation"])
    end
    
    if haskey(dict, "training")
        config.training = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in dict["training"])
    end
    
    if haskey(dict, "nlp")
        config.nlp = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in dict["nlp"])
    end
    
    if haskey(dict, "architecture")
        config.architecture = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in dict["architecture"])
    end
    
    if haskey(dict, "inference")
        config.inference = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in dict["inference"])
    end
    
    if haskey(dict, "acceleration")
        config.acceleration = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in dict["acceleration"])
    end
    
    return config
end

"""
    available_presets()

Devuelve la lista de presets disponibles.

# Retorna
- `Vector{Symbol}` con los nombres de los presets
"""
function available_presets()
    return collect(keys(REGISTERED_PRESETS))
end

"""
    register_preset(name::Symbol, config::Dict{Symbol,Any})

Registra un nuevo preset de configuración.

# Argumentos
- `name::Symbol`: Nombre del preset
- `config::Dict{Symbol,Any}`: Configuración del preset

# Retorna
- `true` si se registró correctamente
"""
function register_preset(name::Symbol, config::Dict{Symbol,Any})
    REGISTERED_PRESETS[name] = config
    return true
end

"""
    dump_configuration(config::RNTAConfig; format::Symbol=:readable)

Convierte una configuración a texto para visualización o debugging.

# Argumentos
- `config::RNTAConfig`: Configuración a visualizar
- `format::Symbol=:readable`: Formato de salida (:readable, :compact, :json, :toml)

# Retorna
- `String` con la representación de la configuración
"""
function dump_configuration(config::RNTAConfig; format::Symbol=:readable)
    if format == :json
        return JSON.json(config_to_dict(config), 4)
    elseif format == :toml
        io = IOBuffer()
        TOML.print(io, config_to_dict(config))
        return String(take!(io))
    elseif format == :compact
        return compact_config_string(config)
    else
        return readable_config_string(config)
    end
end

"""
    readable_config_string(config::RNTAConfig)

Genera una representación legible de la configuración.
"""
function readable_config_string(config::RNTAConfig)
    io = IOBuffer()
    
    println(io, "RNTA Configuration: $(config.name) (v$(config.version))")
    println(io, "Created: $(config.created_at)")
    println(io, "Description: $(config.description)")
    println(io)
    
    # Imprimir secciones
    print_config_section(io, "Brain Space", config.brain_space)
    print_config_section(io, "Core", config.core)
    print_config_section(io, "Operations", config.operations)
    print_config_section(io, "Adaptation", config.adaptation)
    print_config_section(io, "Training", config.training)
    print_config_section(io, "NLP", config.nlp)
    print_config_section(io, "Architecture", config.architecture)
    print_config_section(io, "Inference", config.inference)
    print_config_section(io, "Acceleration", config.acceleration)
    
    return String(take!(io))
end

"""
    diff_configurations(config1::RNTAConfig, config2::RNTAConfig)

Compara dos configuraciones y muestra las diferencias.

# Argumentos
- `config1::RNTAConfig`: Primera configuración
- `config2::RNTAConfig`: Segunda configuración

# Retorna
- `Dict` con las diferencias encontradas
"""
function diff_configurations(config1::RNTAConfig, config2::RNTAConfig)
    diff = Dict{Symbol,Any}()
    
    # Comparar metadatos
    if config1.name != config2.name
        diff[:name] = (config1.name, config2.name)
    end
    
    if config1.version != config2.version
        diff[:version] = (config1.version, config2.version)
    end
    
    if config1.description != config2.description
        diff[:description] = (config1.description, config2.description)
    end
    
    # Comparar secciones
    diff[:brain_space] = diff_config_dicts(config1.brain_space, config2.brain_space)
    diff[:core] = diff_config_dicts(config1.core, config2.core)
    diff[:operations] = diff_config_dicts(config1.operations, config2.operations)
    diff[:adaptation] = diff_config_dicts(config1.adaptation, config2.adaptation)
    diff[:training] = diff_config_dicts(config1.training, config2.training)
    diff[:nlp] = diff_config_dicts(config1.nlp, config2.nlp)
    diff[:architecture] = diff_config_dicts(config1.architecture, config2.architecture)
    diff[:inference] = diff_config_dicts(config1.inference, config2.inference)
    diff[:acceleration] = diff_config_dicts(config1.acceleration, config2.acceleration)
    
    # Eliminar secciones sin diferencias
    for key in keys(diff)
        if isa(diff[key], Dict) && isempty(diff[key])
            delete!(diff, key)
        end
    end
    
    return diff
end

"""
    configure_for_hardware(config::RNTAConfig, hardware_type::Symbol)

Configura optimizaciones específicas para un tipo de hardware.

# Argumentos
- `config::RNTAConfig`: Configuración a modificar
- `hardware_type::Symbol`: Tipo de hardware (:cpu, :cuda_gpu, :rocm_gpu, :tpu)

# Retorna
- `RNTAConfig` optimizada para el hardware especificado
"""
function configure_for_hardware(config::RNTAConfig, hardware_type::Symbol)
    new_config = deepcopy(config)
    
    if hardware_type == :cpu
        # Configurar para CPU
        new_config.acceleration[:memory_optimization] = Dict{Symbol,Any}(
            :use_memory_pool => true,
            :prefetch_buffers => false,
            :optimize_for_cores => Sys.CPU_THREADS,
            :use_blas_threads => min(16, Sys.CPU_THREADS)
        )
        
        new_config.acceleration[:hardware_adaptation] = Dict{Symbol,Any}(
            :use_avx => true,
            :use_fma => true,
            :tensor_contraction_algorithm => "cache_optimized"
        )
        
        # Deshabilitar CUDA si estaba habilitado
        if haskey(new_config.acceleration, :cuda_tensors)
            new_config.acceleration[:cuda_tensors] = Dict{Symbol,Any}(
                :enabled => false
            )
        end
        
    elseif hardware_type == :cuda_gpu
        # Verificar si CUDA está disponible
        if !CUDA.functional()
            @warn "CUDA solicitado pero no disponible en el sistema. Configurando de todos modos."
        end
        
        # Configurar para GPU NVIDIA
        new_config.acceleration[:cuda_tensors] = Dict{Symbol,Any}(
            :enabled => true,
            :optimize_kernels => true,
            :use_tensor_cores => true
        )
        
        new_config.acceleration[:memory_optimization] = Dict{Symbol,Any}(
            :use_memory_pool => true,
            :prefetch_buffers => true,
            :use_cuda_streams => true,
            :max_workspace_size_mb => 1024
        )
        
        new_config.acceleration[:tensor_parallelism] = Dict{Symbol,Any}(
            :enabled => true,
            :parallelize_strategy => "auto"
        )
        
    elseif hardware_type == :rocm_gpu
        # Configurar para GPU AMD
        # (implementación conceptual)
        new_config.acceleration[:hardware_adaptation] = Dict{Symbol,Any}(
            :rocm_enabled => true,
            :optimize_for_mi_series => true
        )
        
    elseif hardware_type == :tpu
        # Configurar para TPU
        # (implementación conceptual)
        new_config.acceleration[:hardware_adaptation] = Dict{Symbol,Any}(
            :tpu_enabled => true,
            :bfloat16_mixed_precision => true
        )
        
    else
        error("Tipo de hardware no soportado: $hardware_type")
    end
    
    return new_config
end

"""
    required_configuration(module_name::Symbol)

Obtiene la configuración mínima requerida para un módulo específico.

# Argumentos
- `module_name::Symbol`: Nombre del módulo (:core, :operations, etc.)

# Retorna
- `Dict{Symbol,Any}` con la configuración mínima requerida
"""
function required_configuration(module_name::Symbol)
    if module_name == :core
        return Dict{Symbol,Any}(
            :tensor_neuron => Dict{Symbol,Any}(
                :activation_type => "relu"
            ),
            :spatial_field => Dict{Symbol,Any}(
                :default_dimensions => [32, 32, 32]
            ),
            :connections => Dict{Symbol,Any}(
                :initial_density => 0.1
            )
        )
    elseif module_name == :operations
        return Dict{Symbol,Any}(
            :tensor_transformations => Dict{Symbol,Any}(
                :enable_3d_convolutions => true
            ),
            :volumetric_activations => Dict{Symbol,Any}(
                :default_type => "relu"
            )
        )
    elseif module_name == :adaptation
        return Dict{Symbol,Any}(
            :dynamic_expansion => Dict{Symbol,Any}(
                :enabled => true,
                :expansion_threshold => 0.8
            ),
            :plasticity_rules => Dict{Symbol,Any}(
                :hebbian_learning => true,
                :plasticity_rate => 0.01
            )
        )
    elseif module_name == :training
        return Dict{Symbol,Any}(
            :multidimensional_loss => Dict{Symbol,Any}(
                :loss_type => "mse"
            ),
            :spatial_optimizers => Dict{Symbol,Any}(
                :optimizer_type => "adam",
                :learning_rate => 0.001
            )
        )
    elseif module_name == :nlp
        return Dict{Symbol,Any}(
            :tensorial_tokenizer => Dict{Symbol,Any}(
                :vocab_size => 32000
            ),
            :contextual_mapping => Dict{Symbol,Any}(
                :context_window_size => 2048
            )
        )
    elseif module_name == :architecture
        return Dict{Symbol,Any}(
            :cortical_layers => Dict{Symbol,Any}(
                :num_layers => 6
            ),
            :prefrontal_system => Dict{Symbol,Any}(
                :executive_control_enabled => true
            )
        )
    elseif module_name == :inference
        return Dict{Symbol,Any}(
            :internal_dialogue => Dict{Symbol,Any}(
                :enabled => true,
                :max_iterations => 5
            ),
            :reasoning_pathways => Dict{Symbol,Any}(
                :depth_first_exploration => true
            )
        )
    elseif module_name == :acceleration
        return Dict{Symbol,Any}(
            :memory_optimization => Dict{Symbol,Any}(
                :use_memory_pool => true
            ),
            :tensor_parallelism => Dict{Symbol,Any}(
                :enabled => CUDA.functional()
            )
        )
    else
        error("Módulo desconocido: $module_name")
    end
end

# Inicializar presets predefinidos
function __init__()
    # Preset para alta eficiencia energética
    register_preset(:energy_efficient, Dict{Symbol,Any}(
        :name => "Energy Efficient",
        :description => "Configuración optimizada para minimizar el consumo energético",
        :acceleration => Dict{Symbol,Any}(
            :memory_optimization => Dict{Symbol,Any}(
                :use_memory_pool => true,
                :prefetch_buffers => false
            ),
            :hardware_adaptation => Dict{Symbol,Any}(
                :power_saving_mode => true,
                :dynamic_clock_adjustment => true
            )
        ),
        :training => Dict{Symbol,Any}(
            :spatial_optimizers => Dict{Symbol,Any}(
                :compute_precision => "float16"
            )
        ),
        :adaptation => Dict{Symbol,Any}(
            :self_pruning => Dict{Symbol,Any}(
                :aggressive_pruning => true,
                :pruning_threshold => 0.3
            )
        )
    ))
    
    # Preset para rendimiento máximo
    register_preset(:max_performance, Dict{Symbol,Any}(
        :name => "Maximum Performance",
        :description => "Configuración optimizada para máximo rendimiento",
        :acceleration => Dict{Symbol,Any}(
            :memory_optimization => Dict{Symbol,Any}(
                :use_memory_pool => true,
                :prefetch_buffers => true,
                :precompiled_kernels => true
            ),
            :hardware_adaptation => Dict{Symbol,Any}(
                :power_saving_mode => false,
                :max_clock_frequency => true
            ),
            :cuda_tensors => Dict{Symbol,Any}(
                :enabled => CUDA.functional(),
                :optimize_kernels => true,
                :use_tensor_cores => true
            )
        ),
        :adaptation => Dict{Symbol,Any}(
            :self_pruning => Dict{Symbol,Any}(
                :aggressive_pruning => false
            )
        ),
        :architecture => Dict{Symbol,Any}(
            :prefrontal_system => Dict{Symbol,Any}(
                :parallel_reasoning_paths => 4
            )
        )
    ))
    
    # Preset para máxima precisión
    register_preset(:high_accuracy, Dict{Symbol,Any}(
        :name => "High Accuracy",
        :description => "Configuración optimizada para máxima precisión",
        :training => Dict{Symbol,Any}(
            :spatial_optimizers => Dict{Symbol,Any}(
                :compute_precision => "float32"
            ),
            :multidimensional_loss => Dict{Symbol,Any}(
                :weighted_regions => true,
                :loss_scaling => "adaptive"
            )
        ),
        :inference => Dict{Symbol,Any}(
            :internal_dialogue => Dict{Symbol,Any}(
                :enabled => true,
                :max_iterations => 10,
                :convergence_threshold => 0.0001
            ),
            :uncertainty_estimation => Dict{Symbol,Any}(
                :enabled => true,
                :confidence_threshold => 0.95
            )
        ),
        :adaptation => Dict{Symbol,Any}(
            :self_pruning => Dict{Symbol,Any}(
                :aggressive_pruning => false,
                :pruning_threshold => 0.01
            )
        )
    ))
    
    # Preset para NLP
    register_preset(:nlp_optimized, Dict{Symbol,Any}(
        :name => "NLP Optimized",
        :description => "Configuración optimizada para tareas de procesamiento de lenguaje natural",
        :nlp => Dict{Symbol,Any}(
            :tensorial_tokenizer => Dict{Symbol,Any}(
                :vocab_size => 50000,
                :contextual_embeddings => true
            ),
            :semantic_space => Dict{Symbol,Any}(
                :embedding_dimensions => [256, 256, 128],
                :attention_heads => 16
            ),
            :language_generation => Dict{Symbol,Any}(
                :beam_search_enabled => true,
                :beam_width => 4,
                :top_k => 40,
                :top_p => 0.9
            )
        ),
        :architecture => Dict{Symbol,Any}(
            :cortical_layers => Dict{Symbol,Any}(
                :num_layers => 12,
                :specialization => "language"
            ),
            :hippocampal_memory => Dict{Symbol,Any}(
                :context_retrieval_strength => 0.8,
                :memory_capacity => "adaptive"
            )
        ),
        :inference => Dict{Symbol,Any}(
            :internal_dialogue => Dict{Symbol,Any}(
                :enabled => true,
                :linguistic_bias => 0.7
            )
        )
    ))
end

end # module

"""
    configure_for_task(config::RNTAConfig, task_type::Symbol)

Configura optimizaciones específicas para un tipo de tarea.

# Argumentos
- `config::RNTAConfig`: Configuración a modificar
- `task_type::Symbol`: Tipo de tarea (:language_generation, :reasoning, :multimodal)

# Retorna
- `RNTAConfig` optimizada para la tarea especificada
"""
function configure_for_task(config::RNTAConfig, task_type::Symbol)
    new_config = deepcopy(config)
    
    if task_type == :language_generation
        # Optimizar para generación de lenguaje
        new_config.nlp[:language_generation] = Dict{Symbol,Any}(
            :beam_search_enabled => true,
            :beam_width => 4,
            :top_k => 40,
            :top_p => 0.9,
            :temperature => 0.8
        )
        
        new_config.nlp[:semantic_space] = Dict{Symbol,Any}(
            :embedding_dimensions => [128, 128, 64],
            :context_window_size => 4096
        )
        
        new_config.inference[:reasoning_pathways] = Dict{Symbol,Any}(
            :prioritize_fluency => true
        )
        
    elseif task_type == :reasoning
        # Optimizar para razonamiento
        new_config.inference[:internal_dialogue] = Dict{Symbol,Any}(
            :enabled => true,
            :max_iterations => 10,
            :deliberation_strength => 0.8
        )
        
        new_config.inference[:reasoning_pathways] = Dict{Symbol,Any}(
            :prioritize_accuracy => true,
            :logical_consistency_check => true
        )
        
        new_config.architecture[:prefrontal_system] = Dict{Symbol,Any}(
            :executive_control_strength => 0.9,
            :working_memory_capacity => 16
        )
        
    elseif task_type == :multimodal
        # Optimizar para procesamiento multimodal
        new_config.inference[:multimodal_integration] = Dict{Symbol,Any}(
            :enabled => true,
            :fusion_strategy => "adaptive",
            :modality_weights => Dict{Symbol,Float64}(
                :text => 0.6,
                :image => 0.3,
                :audio => 0.1
            )
        )
        
        new_config.architecture[:cortical_layers] = Dict{Symbol,Any}(
            :modality_specific_pathways => true,
            :integration_layers => 4
        )
        
    else
        error("Tipo de tarea no soportado: $task_type")
    end
    
    return new_config
end

"""
    diff_config_dicts(dict1::Dict{Symbol,Any}, dict2::Dict{Symbol,Any})

Compara dos diccionarios de configuración y devuelve las diferencias.
"""
function diff_config_dicts(dict1::Dict{Symbol,Any}, dict2::Dict{Symbol,Any})
    diff = Dict{Symbol,Any}()
    
    # Claves en ambos diccionarios
    common_keys = intersect(keys(dict1), keys(dict2))
    for key in common_keys
        if isa(dict1[key], Dict) && isa(dict2[key], Dict)
            # Comparar recursivamente
            if isa(dict1[key], Dict{Symbol,Any}) && isa(dict2[key], Dict{Symbol,Any})
                subdiff = diff_config_dicts(dict1[key], dict2[key])
                if !isempty(subdiff)
                    diff[key] = subdiff
                end
            else
                # Convertir claves si son de tipo diferente
                d1 = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in dict1[key])
                d2 = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in dict2[key])
                subdiff = diff_config_dicts(d1, d2)
                if !isempty(subdiff)
                    diff[key] = subdiff
                end
            end
        elseif dict1[key] != dict2[key]
            # Valores diferentes
            diff[key] = (dict1[key], dict2[key])
        end
    end
    
    # Claves solo en dict1
    only_in_dict1 = setdiff(keys(dict1), keys(dict2))
    for key in only_in_dict1
        diff[key] = (dict1[key], missing)
    end
    
    # Claves solo en dict2
    only_in_dict2 = setdiff(keys(dict2), keys(dict1))
    for key in only_in_dict2
        diff[key] = (missing, dict2[key])
    end
    
    return diff
end

"""
    print_config_section(io::IO, title::String, config::Dict{Symbol,Any}, indent::Int=0)

Imprime una sección de configuración con formato.
"""
function print_config_section(io::IO, title::String, config::Dict{Symbol,Any}, indent::Int=0)
    if isempty(config)
        return
    end
    
    indent_str = " " ^ indent
    println(io, indent_str, "### ", title, " ###")
    
    for (key, value) in sort(collect(config), by=first)
        if isa(value, Dict)
            println(io, indent_str, "  $(key):")
            if isa(value, Dict{Symbol,Any})
                print_config_section(io, "", value, indent + 4)
            else
                value_dict = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in value)
                print_config_section(io, "", value_dict, indent + 4)
            end
        else
            println(io, indent_str, "  $(key): $(value)")
        end
    end
    
    println(io)
end

"""
    compact_config_string(config::RNTAConfig)

Genera una representación compacta de la configuración.
"""
function compact_config_string(config::RNTAConfig)
    io = IOBuffer()
    
    println(io, "$(config.name) (v$(config.version))")
    
    # Contar configuraciones por sección
    counts = Dict(
        "brain_space" => length(config.brain_space),
        "core" => length(config.core),
        "operations" => length(config.operations),
        "adaptation" => length(config.adaptation),
        "training" => length(config.training),
        "nlp" => length(config.nlp),
        "architecture" => length(config.architecture),
        "inference" => length(config.inference),
        "acceleration" => length(config.acceleration)
    )
    
    # Imprimir resumen
    for (section, count) in counts
        if count > 0
            println(io, "  $(section): $(count) settings")
        end
    end
    
    return String(take!(io))
end

"""
    config_to_dict(config::RNTAConfig)

Convierte una estructura RNTAConfig en un diccionario.
"""
function config_to_dict(config::RNTAConfig)
    dict = Dict{String,Any}(
        "name" => config.name,
        "version" => config.version,
        "created_at" => string(config.created_at),
        "description" => config.description
    )
    
    # Convertir secciones específicas
    if !isempty(config.brain_space)
        dict["brain_space"] = Dict{String,Any}(string(k) => v for (k, v) in config.brain_space)
    end
    
    if !isempty(config.core)
        dict["core"] = Dict{String,Any}(string(k) => v for (k, v) in config.core)
    end
    
    if !isempty(config.operations)
        dict["operations"] = Dict{String,Any}(string(k) => v for (k, v) in config.operations)
    end
    
    if !isempty(config.adaptation)
        dict["adaptation"] = Dict{String,Any}(string(k) => v for (k, v) in config.adaptation)
    end
    
    if !isempty(config.training)
        dict["training"] = Dict{String,Any}(string(k) => v for (k, v) in config.training)
    end
    
    if !isempty(config.nlp)
        dict["nlp"] = Dict{String,Any}(string(k) => v for (k, v) in config.nlp)
    end
    
    if !isempty(config.architecture)
        dict["architecture"] = Dict{String,Any}(string(k) => v for (k, v) in config.architecture)
    end
    
    if !isempty(config.inference)
        dict["inference"] = Dict{String,Any}(string(k) => v for (k, v) in config.inference)
    end
    
    if !isempty(config.acceleration)
        dict["acceleration"] = Dict{String,Any}(string(k) => v for (k, v) in config.acceleration)
    end
    
    return dict
end

"""
    validate_configuration(config::RNTAConfig)

Valida que una configuración sea correcta y consistente.

# Argumentos
- `config::RNTAConfig`: Configuración a validar

# Retorna
- `true` si la configuración es válida, lanza un error en caso contrario
"""
function validate_configuration(config::RNTAConfig)
    # Verificar que los campos obligatorios estén presentes
    required_fields = [:name, :version]
    for field in required_fields
        if !isdefined(config, field) || getfield(config, field) == ""
            error("El campo obligatorio '$field' está vacío o no definido")
        end
    end
    
    # Validar interdependencias
    validate_module_dependencies(config)
    
    # Validar configuraciones específicas de cada módulo
    validate_brain_space_config(config.brain_space)
    validate_core_config(config.core)
    validate_operations_config(config.operations)
    validate_adaptation_config(config.adaptation)
    validate_training_config(config.training)
    validate_nlp_config(config.nlp)
    validate_architecture_config(config.architecture)
    validate_inference_config(config.inference)
    validate_acceleration_config(config.acceleration)
    
    return true
end

"""
    validate_module_dependencies(config::RNTAConfig)

Valida las dependencias entre módulos de la configuración.
"""
function validate_module_dependencies(config::RNTAConfig)
    # Ejemplos de validaciones de interdependencia
    
    # Si se habilita adaptación dinámica, verificar que existen las configuraciones necesarias
    if haskey(config.adaptation, :dynamic_expansion) && 
       get(config.adaptation[:dynamic_expansion], "enabled", false)
        
        # Verificar que existe configuración de especialización
        if !haskey(config.adaptation, :specialization)
            @warn "Se ha habilitado expansión dinámica pero falta configuración de especialización"
        end
        
        # Verificar que existe configuración de plasticidad
        if !haskey(config.adaptation, :plasticity_rules)
            @warn "Se ha habilitado expansión dinámica pero falta configuración de reglas de plasticidad"
        end
    end
    
    # Si se habilita aceleración CUDA, verificar configuración de hardware
    if haskey(config.acceleration, :cuda_tensors) && 
       get(config.acceleration[:cuda_tensors], "enabled", false)
        
        # Verificar que existe configuración de memoria
        if !haskey(config.acceleration, :memory_optimization)
            @warn "Se ha habilitado CUDA pero falta configuración de optimización de memoria"
        end
    end
    
    # Si se configura NLP, verificar configuraciones relacionadas
    if !isempty(config.nlp)
        # Verificar que existe configuración de atención
        if !haskey(config.operations, :spatial_attention)
            @warn "Se ha configurado NLP pero falta configuración de atención espacial"
        end
    end
end

"""
    validate_brain_space_config(config::Dict{Symbol,Any})

Valida la configuración específica del espacio cerebral.
"""
function validate_brain_space_config(config::Dict{Symbol,Any})
    # Validar dimensiones si están presentes
    if haskey(config, :dimensions)
        dims = config[:dimensions]
        if !(dims isa Vector) || length(dims) != 3 || any(d -> !(d isa Integer) || d <= 0, dims)
            error("Las dimensiones del espacio cerebral deben ser un vector de 3 enteros positivos")
        end
    end
    
    # Validar resolución si está presente
    if haskey(config, :resolution)
        res = config[:resolution]
        if !(res isa Number) || res <= 0
            error("La resolución debe ser un número positivo")
        end
    end
    
    # Otras validaciones específicas del espacio cerebral
    return true
end

"""
    validate_core_config(config::Dict{Symbol,Any})

Valida la configuración del módulo core.
"""
function validate_core_config(config::Dict{Symbol,Any})
    # Validar configuración de neurona tensorial
    if haskey(config, :tensor_neuron)
        neuron_config = config[:tensor_neuron]
        
        # Validar que tiene los campos necesarios
        if isa(neuron_config, Dict) && haskey(neuron_config, "activation_type")
            # Validar tipo de activación
            valid_activations = ["relu", "sigmoid", "tanh", "gelu", "volumetric"]
            if neuron_config["activation_type"] ∉ valid_activations
                error("Tipo de activación no válido: $(neuron_config["activation_type"])")
            end
        end
    end
    
    # Otras validaciones del módulo core
    return true
end

"""
    validate_operations_config(config::Dict{Symbol,Any})

Valida la configuración del módulo operations.
"""
function validate_operations_config(config::Dict{Symbol,Any})
    # Validar configuración de atención espacial
    if haskey(config, :spatial_attention)
        attention_config = config[:spatial_attention]
        
        # Validar número de cabezas de atención
        if isa(attention_config, Dict) && haskey(attention_config, "num_heads")
            if !(attention_config["num_heads"] isa Integer) || attention_config["num_heads"] <= 0
                error("El número de cabezas de atención debe ser un entero positivo")
            end
        end
    end
    
    # Otras validaciones del módulo operations
    return true
end

"""
    validate_adaptation_config(config::Dict{Symbol,Any})

Valida la configuración del módulo adaptation.
"""
function validate_adaptation_config(config::Dict{Symbol,Any})
    # Validar configuración de expansión dinámica
    if haskey(config, :dynamic_expansion)
        expansion_config = config[:dynamic_expansion]
        
        # Validar umbral de expansión
        if isa(expansion_config, Dict) && haskey(expansion_config, "expansion_threshold")
            threshold = expansion_config["expansion_threshold"]
            if !(threshold isa Number) || threshold < 0 || threshold > 1
                error("El umbral de expansión debe ser un número entre 0 y 1")
            end
        end
    end
    
    # Otras validaciones del módulo adaptation
    return true
end

"""
    validate_training_config(config::Dict{Symbol,Any})

Valida la configuración del módulo training.
"""
function validate_training_config(config::Dict{Symbol,Any})
    # Validar configuración de optimizadores
    if haskey(config, :spatial_optimizers)
        optimizer_config = config[:spatial_optimizers]
        
        # Validar tipo de optimizador
        if isa(optimizer_config, Dict) && haskey(optimizer_config, "optimizer_type")
            valid_optimizers = ["sgd", "adam", "radam", "spatial_sgd", "spatial_adam"]
            if optimizer_config["optimizer_type"] ∉ valid_optimizers
                error("Tipo de optimizador no válido: $(optimizer_config["optimizer_type"])")
            end
        end
        
        # Validar tasa de aprendizaje
        if isa(optimizer_config, Dict) && haskey(optimizer_config, "learning_rate")
            lr = optimizer_config["learning_rate"]
            if !(lr isa Number) || lr <= 0
                error("La tasa de aprendizaje debe ser un número positivo")
            end
        end
    end
    
    # Otras validaciones del módulo training
    return true
end

"""
    validate_nlp_config(config::Dict{Symbol,Any})

Valida la configuración del módulo NLP.
"""
function validate_nlp_config(config::Dict{Symbol,Any})
    # Validar configuración del tokenizador
    if haskey(config, :tensorial_tokenizer)
        tokenizer_config = config[:tensorial_tokenizer]
        
        # Validar tamaño de vocabulario
        if isa(tokenizer_config, Dict) && haskey(tokenizer_config, "vocab_size")
            vocab_size = tokenizer_config["vocab_size"]
            if !(vocab_size isa Integer) || vocab_size <= 0
                error("El tamaño del vocabulario debe ser un entero positivo")
            end
        end
    end
    
    # Otras validaciones del módulo NLP
    return true
end

"""
    validate_architecture_config(config::Dict{Symbol,Any})

Valida la configuración del módulo architecture.
"""
function validate_architecture_config(config::Dict{Symbol,Any})
    # Validar configuración de capas corticales
    if haskey(config, :cortical_layers)
        cortical_config = config[:cortical_layers]
        
        # Validar número de capas
        if isa(cortical_config, Dict) && haskey(cortical_config, "num_layers")
            num_layers = cortical_config["num_layers"]
            if !(num_layers isa Integer) || num_layers <= 0
                error("El número de capas corticales debe ser un entero positivo")
            end
        end
    end
    
    # Otras validaciones del módulo architecture
    return true
end

"""
    validate_inference_config(config::Dict{Symbol,Any})

Valida la configuración del módulo inference.
"""
function validate_inference_config(config::Dict{Symbol,Any})
    # Validar configuración de diálogo interno
    if haskey(config, :internal_dialogue)
        dialogue_config = config[:internal_dialogue]
        
        # Validar número de iteraciones
        if isa(dialogue_config, Dict) && haskey(dialogue_config, "max_iterations")
            max_iter = dialogue_config["max_iterations"]
            if !(max_iter isa Integer) || max_iter <= 0
                error("El número máximo de iteraciones debe ser un entero positivo")
            end
        end
    end
    
    # Otras validaciones del módulo inference
    return true
end

"""
    validate_acceleration_config(config::Dict{Symbol,Any})

Valida la configuración del módulo acceleration.
"""
function validate_acceleration_config(config::Dict{Symbol,Any})
    # Validar configuración CUDA
    if haskey(config, :cuda_tensors)
        cuda_config = config[:cuda_tensors]
        
        # Validar si CUDA está habilitado pero no disponible
        if isa(cuda_config, Dict) && 
           get(cuda_config, "enabled", false) && 
           !CUDA.functional()
            @warn "CUDA está habilitado en la configuración pero no está disponible en el sistema"
        end
    end
    
    # Otras validaciones del módulo acceleration
    return true
end

"""
    merge_configurations(base_config::RNTAConfig, override_config::RNTAConfig)

Combina dos configuraciones, con la segunda tomando precedencia.

# Argumentos
- `base_config::RNTAConfig`: Configuración base
- `override_config::RNTAConfig`: Configuración que sobreescribe

# Retorna
- `RNTAConfig` combinada
"""
function merge_configurations(base_config::RNTAConfig, override_config::RNTAConfig)
    # Crear nueva configuración
    merged = RNTAConfig(
        override_config.name != "default" ? override_config.name : base_config.name,
        override_config.description != "Default configuration" ? override_config.description : base_config.description
    )
    
    # Copiar metadatos
    merged.version = override_config.version
    merged.created_at = now()
    
    # Fusionar diccionarios de configuración
    merged.brain_space = merge_config_dicts(base_config.brain_space, override_config.brain_space)
    merged.core = merge_config_dicts(base_config.core, override_config.core)
    merged.operations = merge_config_dicts(base_config.operations, override_config.operations)
    merged.adaptation = merge_config_dicts(base_config.adaptation, override_config.adaptation)
    merged.training = merge_config_dicts(base_config.training, override_config.training)
    merged.nlp = merge_config_dicts(base_config.nlp, override_config.nlp)
    merged.architecture = merge_config_dicts(base_config.architecture, override_config.architecture)
    merged.inference = merge_config_dicts(base_config.inference, override_config.inference)
    merged.acceleration = merge_config_dicts(base_config.acceleration, override_config.acceleration)
    
    return merged
end

"""
    merge_config_dicts(base::Dict{Symbol,Any}, override::Dict{Symbol,Any})

Fusiona recursivamente dos diccionarios de configuración.
"""
function merge_config_dicts(base::Dict{Symbol,Any}, override::Dict{Symbol,Any})
    result = copy(base)
    
    for (key, value) in override
        if haskey(result, key) && 
           isa(result[key], Dict) && 
           isa(value, Dict)
            # Fusionar recursivamente si ambos son diccionarios
            if isa(result[key], Dict{Symbol,Any}) && isa(value, Dict{Symbol,Any})
                result[key] = merge_config_dicts(result[key], value)
            elseif isa(result[key], Dict) && isa(value, Dict)
                # Convertir claves si son de tipo diferente
                base_dict = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in result[key])
                override_dict = Dict{Symbol,Any}(Symbol(k) => v for (k, v) in value)
                result[key] = merge_config_dicts(base_dict, override_dict)
            else
                # Sobreescribir si no se pueden fusionar
                result[key] = value
            end
        else
            # Sobreescribir o añadir
            result[key] = value
        end
    end
    
    return result
end

"""
    apply_presets(config::RNTAConfig, preset_name::Symbol)

Aplica un preset predefinido a una configuración.

# Argumentos
- `config::RNTAConfig`: Configuración a modificar
- `preset_name::Symbol`: Nombre del preset a aplicar

# Retorna
- `RNTAConfig` con el preset aplicado
"""
function apply_presets(config::RNTAConfig, preset_name::Symbol)
    if !haskey(REGISTERED_PRESETS, preset_name)
        error("El preset '$preset_name' no está registrado")
    end
    
    preset_dict = REGISTERED_PRESETS[preset_name]
    preset_config = dict_to_rnta_config(preset_dict)
    
    return merge_configurations(config, preset_config)
end

"""
    dict_to_rnta_config(dict::Dict{Symbol,Any})

Convierte un diccionario a una estructura RNTAConfig.
"""
function dict_to_rnta_config(dict::Dict{Symbol,Any})
    config = RNTAConfig(
        get(dict, :name, "default"),
        get(dict, :description, "")
    )
    
    # Copiar secciones específicas
    if haskey(dict, :brain_space)
        config.brain_space = dict[:brain_space]
    end
    
    if haskey(dict, :core)
        config.core = dict[:core]
    end
    
    if haskey(dict, :operations)
        config.operations = dict[:operations]
    end
    
    if haskey(dict, :adaptation)
        config.adaptation = dict[:adaptation]
    end
    
    if haskey(dict, :training)
        config.training = dict[:training]
    end
    
    if haskey(dict, :nlp)
        config.nlp = dict[:nlp]
    end
    
    if haskey(dict, :architecture)
        config.architecture = dict[:architecture]
    end
    
    if haskey(dict, :inference)
        config.inference = dict[:inference]
    end
    
    if haskey(dict, :acceleration)
        config.acceleration = dict[:acceleration]
    end
    
    return config
end
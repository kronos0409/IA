# utils/Visualization.jl
# Herramientas para visualización del espacio cerebral y su actividad

using Colors
using Makie  # Esta línea se puede ajustar según la biblioteca de visualización preferida

"""
    plot_brain_activity(brain; options...)

Genera una visualización 3D de la actividad del espacio cerebral.
"""
function plot_brain_activity(
    brain::BrainSpace;
    display_neurons::Bool=true,
    display_connections::Bool=true,
    slice_view::Bool=false,
    slice_dim::Int=3,
    slice_pos::Int=nothing,
    activity_threshold::Float32=0.3,
    neuron_size_factor::Float32=1.0f0,
    connection_threshold::Float32=0.2,
    save_path::String=nothing
)
    # Crear figura
    fig = Figure(resolution=(1200, 800))
    ax = Axis3(fig[1, 1], aspect=:data, perspectiveness=0.5)
    
    # Calcular posición de corte para vista en rebanada
    if slice_view
        if isnothing(slice_pos)
            # Por defecto, cortar en el medio
            if slice_dim == 1
                slice_pos = div(brain.dimensions[1], 2)
            elseif slice_dim == 2
                slice_pos = div(brain.dimensions[2], 2)
            else
                slice_pos = div(brain.dimensions[3], 2)
            end
        end
    end
    
    # Visualizar neuronas
    if display_neurons
        neuron_positions = Point3f[]
        neuron_colors = RGBA{Float32}[]
        neuron_sizes = Float32[]
        
        for (pos, neuron) in brain.neurons
            # Calcular actividad de la neurona
            activity = mean(abs.(neuron.state))
            
            # Aplicar filtro de actividad
            if activity > activity_threshold
                # Filtrar por corte si está habilitado
                if !slice_view || 
                   (slice_dim == 1 && pos[1] == slice_pos) ||
                   (slice_dim == 2 && pos[2] == slice_pos) ||
                   (slice_dim == 3 && pos[3] == slice_pos)
                    
                    # Añadir posición
                    push!(neuron_positions, Point3f(pos[1], pos[2], pos[3]))
                    
                    # Color basado en tipo funcional y actividad
                    base_color = get_neuron_color(neuron.functional_type)
                    alpha = min(1.0f0, activity + 0.3f0)  # Aumentar visibilidad de neuronas poco activas
                    push!(neuron_colors, RGBA{Float32}(base_color..., alpha))
                    
                    # Tamaño basado en actividad
                    size = activity * neuron_size_factor
                    push!(neuron_sizes, size)
                end
            end
        end
        
        # Dibujar neuronas como esferas
        if !isempty(neuron_positions)
            scatter!(ax, neuron_positions, color=neuron_colors, markersize=neuron_sizes)
        end
    end
    
    # Visualizar conexiones
    if display_connections
        for connection in brain.connections
            # Calcular actividad de la conexión
            activity = mean(connection.activity_history)
            
            # Aplicar filtro de actividad
            if activity > connection_threshold
                # Encontrar neuronas origen y destino
                source_pos = nothing
                target_pos = nothing
                
                for (pos, neuron) in brain.neurons
                    if neuron.id == connection.source_id
                        source_pos = pos
                    elseif neuron.id == connection.target_id
                        target_pos = pos
                    end
                    
                    if !isnothing(source_pos) && !isnothing(target_pos)
                        break
                    end
                end
                
                if !isnothing(source_pos) && !isnothing(target_pos)
                    # Filtrar por corte si está habilitado
                    if !slice_view || 
                       (slice_dim == 1 && source_pos[1] == slice_pos && target_pos[1] == slice_pos) ||
                       (slice_dim == 2 && source_pos[2] == slice_pos && target_pos[2] == slice_pos) ||
                       (slice_dim == 3 && source_pos[3] == slice_pos && target_pos[3] == slice_pos)
                        
                        # Color según tipo de conexión
                        if connection.connection_type == :excitatory
                            color = RGBA{Float32}(0.2, 0.8, 0.2, min(1.0f0, activity + 0.2f0))
                        else
                            color = RGBA{Float32}(0.8, 0.2, 0.2, min(1.0f0, activity + 0.2f0))
                        end
                        
                        # Dibujar línea
                        lines!(ax, 
                            [Point3f(source_pos[1], source_pos[2], source_pos[3]), 
                             Point3f(target_pos[1], target_pos[2], target_pos[3])],
                            color=color, 
                            linewidth=activity * 3.0f0)
                    end
                end
            end
        end
    end
    
    # Visualizar actividad global
    if brain.dimensions[1] <= 50 && brain.dimensions[2] <= 50 && brain.dimensions[3] <= 50
        # Solo visualizar actividad global para cerebros pequeños o medianos
        # para evitar problemas de rendimiento
        
        # Crear malla de volumen
        if !slice_view
            # Visualización volumétrica
            voxel_positions = Point3f[]
            voxel_colors = RGBA{Float32}[]
            
            for x in 1:brain.dimensions[1]
                for y in 1:brain.dimensions[2]
                    for z in 1:brain.dimensions[3]
                        activity = abs(brain.global_state[x, y, z])
                        
                        if activity > activity_threshold
                            push!(voxel_positions, Point3f(x, y, z))
                            
                            # Color basado en actividad
                            intensity = min(1.0f0, activity)
                            push!(voxel_colors, RGBA{Float32}(intensity, intensity * 0.5f0, 1.0f0 - intensity, intensity))
                        end
                    end
                end
            end
            
            if !isempty(voxel_positions)
                scatter!(ax, voxel_positions, color=voxel_colors, markersize=0.5, alpha=0.3)
            end
        else
            # Visualización de rebanada
            slice_data = get_brain_slice(brain.global_state, slice_dim, slice_pos)
            heatmap!(ax, slice_data, alpha=0.5)
        end
    end
    
    # Configurar vista
    ax.title = "RNTA Brain Activity"
    ax.xlabel = "X"
    ax.ylabel = "Y"
    ax.zlabel = "Z"
    
    # Mostrar leyenda
    fig[1, 2] = Legend(fig, 
        [MarkerElement(color=get_neuron_color(t), marker=:circle) for t in [:general, :spatial, :temporal, :feature, :contextual]],
        ["General", "Spatial", "Temporal", "Feature", "Contextual"],
        "Neuron Types"
    )
    
    # Guardar si se especificó ruta
    if !isnothing(save_path)
        save(save_path, fig)
    end
    
    return fig
end

"""
    get_neuron_color(neuron_type)

Devuelve un color RGB para un tipo de neurona dado.
"""
function get_neuron_color(neuron_type::Symbol)
    if neuron_type == :general
        return (0.5f0, 0.5f0, 0.5f0)  # Gris
    elseif neuron_type == :spatial
        return (0.2f0, 0.7f0, 0.3f0)  # Verde
    elseif neuron_type == :temporal
        return (0.7f0, 0.3f0, 0.2f0)  # Rojo
    elseif neuron_type == :feature
        return (0.2f0, 0.3f0, 0.8f0)  # Azul
    elseif neuron_type == :contextual
        return (0.8f0, 0.7f0, 0.2f0)  # Amarillo
    else
        return (0.5f0, 0.5f0, 0.5f0)  # Gris por defecto
    end
end

"""
    get_brain_slice(volume, dimension, position)

Extrae una rebanada 2D de un volumen 3D a lo largo de la dimensión especificada.
"""
function get_brain_slice(volume::Array{T,3}, dimension::Int, position::Int) where T <: AbstractFloat
    if dimension == 1
        return volume[position, :, :]
    elseif dimension == 2
        return volume[:, position, :]
    else
        return volume[:, :, position]
    end
end

"""
    visualize_neuron_specialization(brain; options...)

Visualiza la especialización de neuronas en el espacio cerebral.
"""
function visualize_neuron_specialization(
    brain::BrainSpace;
    save_path::String=nothing
)
    # Crear figura
    fig = Figure(resolution=(900, 600))
    
    # Gráfico de barras para tipos de neurona
    ax1 = Axis(fig[1, 1], xlabel="Neuron Type", ylabel="Count", title="Neuron Specialization")
    
    # Contar neuronas por tipo
    type_counts = Dict{Symbol, Int}()
    for (_, neuron) in brain.neurons
        if !haskey(type_counts, neuron.functional_type)
            type_counts[neuron.functional_type] = 0
        end
        type_counts[neuron.functional_type] += 1
    end
    
    # Crear datos para gráfico
    types = collect(keys(type_counts))
    counts = [type_counts[t] for t in types]
    
    # Colorear barras por tipo
    colors = [get_neuron_color(t) for t in types]
    
    # Dibujar gráfico de barras
    barplot!(ax1, 1:length(types), counts, color=colors)
    ax1.xticks = (1:length(types), string.(types))
    
    # Histograma de especialización
    ax2 = Axis(fig[1, 2], xlabel="Specialization Level", ylabel="Count", title="Specialization Distribution")
    
    # Recopilar niveles de especialización
    specialization_levels = [neuron.specialization for (_, neuron) in brain.neurons]
    
    # Dibujar histograma
    hist!(ax2, specialization_levels, bins=10, color=:blue)
    
    # Visualización de evolución de regiones
    if !isempty(brain.expansion_history)
        ax3 = Axis(fig[2, 1:2], xlabel="Expansion Event", ylabel="New Neurons", title="Brain Growth")
        
        # Extraer datos de historia de expansión
        event_indices = 1:length(brain.expansion_history)
        new_neurons = [event.new_neurons for event in brain.expansion_history]
        
        # Dibujar gráfico de líneas
        lines!(ax3, event_indices, new_neurons, color=:red, linewidth=2)
        scatter!(ax3, event_indices, new_neurons, color=:red, markersize=8)
    end
    
    # Guardar si se especificó ruta
    if !isnothing(save_path)
        save(save_path, fig)
    end
    
    return fig
end

"""
    plot_brain_activity_2d(brain; options...)

Genera una visualización 2D simplificada de la actividad cerebral.
"""
function plot_brain_activity_2d(
    brain::BrainSpace;
    projection_type::Symbol=:max,
    activity_threshold::Float32=0.1,
    save_path::String=nothing
)
    # Crear figura
    fig = Figure(resolution=(1000, 800))
    
    # Proyectar actividad 3D a 2D
    activity_xy = project_activity(brain.global_state, 3, projection_type)  # Proyección XY
    activity_xz = project_activity(brain.global_state, 2, projection_type)  # Proyección XZ
    activity_yz = project_activity(brain.global_state, 1, projection_type)  # Proyección YZ
    
    # Aplicar umbral
    activity_xy[activity_xy .< activity_threshold] .= 0
    activity_xz[activity_xz .< activity_threshold] .= 0
    activity_yz[activity_yz .< activity_threshold] .= 0
    
    # Visualizar proyecciones
    ax1 = Axis(fig[1, 1], title="Top View (XY)", xlabel="X", ylabel="Y")
    heatmap!(ax1, activity_xy, colormap=:viridis)
    
    ax2 = Axis(fig[1, 2], title="Front View (XZ)", xlabel="X", ylabel="Z")
    heatmap!(ax2, activity_xz, colormap=:viridis)
    
    ax3 = Axis(fig[2, 1], title="Side View (YZ)", xlabel="Y", ylabel="Z")
    heatmap!(ax3, activity_yz, colormap=:viridis)
    
    # Visualizar neurona positions
    ax4 = Axis3(fig[2, 2], title="Neuron Positions", xlabel="X", ylabel="Y", zlabel="Z")
    
    # Preparar datos de neurona
    neuron_positions = Point3f[]
    neuron_colors = RGBA{Float32}[]
    neuron_sizes = Float32[]
    
    for (pos, neuron) in brain.neurons
        push!(neuron_positions, Point3f(pos[1], pos[2], pos[3]))
        
        # Color basado en tipo funcional
        base_color = get_neuron_color(neuron.functional_type)
        push!(neuron_colors, RGBA{Float32}(base_color..., 0.7f0))
        
        # Tamaño basado en especialización
        size = 1.0f0 + neuron.specialization * 3.0f0
        push!(neuron_sizes, size)
    end
    
    # Dibujar neuronas
    scatter!(ax4, neuron_positions, color=neuron_colors, markersize=neuron_sizes)
    
    # Guardar si se especificó ruta
    if !isnothing(save_path)
        save(save_path, fig)
    end
    
    return fig
end

"""
    project_activity(volume, dimension, projection_type)

Proyecta un volumen 3D a lo largo de una dimensión usando la función especificada.
"""
function project_activity(
    volume::Array{T,3}, 
    dimension::Int, 
    projection_type::Symbol
) where T <: AbstractFloat
    if projection_type == :max
        # Proyección de máximo
        if dimension == 1
            return maximum(volume, dims=1)[1, :, :]
        elseif dimension == 2
            return maximum(volume, dims=2)[:, 1, :]
        else
            return maximum(volume, dims=3)[:, :, 1]
        end
    elseif projection_type == :mean
        # Proyección de media
        if dimension == 1
            return mean(volume, dims=1)[1, :, :]
        elseif dimension == 2
            return mean(volume, dims=2)[:, 1, :]
        else
            return mean(volume, dims=3)[:, :, 1]
        end
    elseif projection_type == :sum
        # Proyección de suma
        if dimension == 1
            return sum(volume, dims=1)[1, :, :]
        elseif dimension == 2
            return sum(volume, dims=2)[:, 1, :]
        else
            return sum(volume, dims=3)[:, :, 1]
        end
    else
        # Por defecto, usar máximo
        if dimension == 1
            return maximum(volume, dims=1)[1, :, :]
        elseif dimension == 2
            return maximum(volume, dims=2)[:, 1, :]
        else
            return maximum(volume, dims=3)[:, :, 1]
        end
    end
end